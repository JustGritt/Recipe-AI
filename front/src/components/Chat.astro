---
import "@styles/chat.css"
import ChatIcon from "@icons/Chat.astro";
import VoiceInput from "./VoiceInput.astro";
import Send from "@icons/Send.astro";
---

<button id="chat-toggle"
    class="fixed right-0 bottom-0 w-10 h-10 lg:w-12 lg:h-12 rounded-full bg-black hover:bg-slate-500 shadow-lg flex items-center justify-center text-white font-bold cursor-pointer transition-all duration-300 ease-in-out">
    <ChatIcon />
</button>

<section id="chat"
    class="fixed bottom-0 right-0 min-w-[90vw] lg:min-w-[420px] lg:w-[33vw] rounded-lg bg-white border-2 border-slate-600 shadow-lg overflow-hidden transition-all duration-300 ease-in-out"
    data-active="false">
    <header class="p-4 bg-slate-700 border-b border-slate-600 text-center py-4 px-0">
        <h2 class="text-xl font-bold m-0 text-slate-100">Recipe Assistant</h2>
    </header>
    <div id="chat-window" class="flex flex-col justify-between p-4 bg-white">
        <ul id="chat-window-history">
            <li class="message-bot">Hello, I'm your recipe assistant. How can I help you?</li>
        </ul>
        <div id="chat-window-input" class="flex items-center gap-2">
            <div class="h-full flex-1 relative">
                <input type="text"
                    class="absolute top-0 left-0 p-2 border-2 border-gray-300 rounded-md shadow-sm block w-full"
                    placeholder="Type a message..." />
                <VoiceInput />
            </div>
            <button id="chat-window-send"
                class="p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none block sm:text-sm bg-black hover:bg-slate-500 text-white">
                <Send />
            </button>
        </div>
    </div>
</section>

<script>
    const chat = document.querySelector('#chat');
    const chatToggle = document.querySelector('#chat-toggle');
    const chatWindow = document.querySelector('#chat-window');
    const chatWindowHistory = document.querySelector('#chat-window-history');
    const chatWindowInput = document.querySelector('#chat-window-input');
    const chatWindowSend = document.querySelector('#chat-window-send');
    const chatWindowInputText = document.querySelector('#chat-window-input input');

    const createMessage = (role, content) => {
        const m = document.createElement('li');
        m.classList.add(`message-${role}`);
        m.innerText = content;
        return m;
    };

    const loadMessage = () => {
        const lm = document.createElement('li');
        lm.classList.add('message-bot');
        lm.innerHTML = `<div class="loading">
            <div class="loading-dot"></div>
            <div class="loading-dot"></div>
            <div class="loading-dot"></div>
        </div>`;
        return lm;
    };

    const handleSendMessage = async () => {
        const msg = chatWindowInputText.value;
        if (msg) {
            chatWindowHistory.appendChild(createMessage('user', msg));
            chatWindowInputText.value = '';
            chatWindowInputText.setAttribute('disabled', 'true');
            const loadingMsg = loadMessage();
            chatWindowHistory.appendChild(loadingMsg);
            await handleResponse(loadingMsg);
            chatWindowInputText.removeAttribute('disabled');
            chatWindowHistory.scrollTop = chatWindowHistory.scrollHeight;
        }
    };

    const handleResponse = async (loadingMsg) => {
        const messagesList = Array.from(chatWindowHistory.querySelectorAll('li')).map(m => ({
            role: m.classList.contains('message-user') ? 'user' : 'assistant',
            content: m.innerText
        }));
        const response = await fetch(import.meta.env.PUBLIC_OPENAI_COMPLETION_URL, {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${import.meta.env.PUBLIC_OPENAI}`
            },
            body: JSON.stringify({
            model: 'gpt-3.5-turbo',
            messages: [
                {
                role: 'system',
                content: 'The following is a conversation with an AI assistant. The assistant is an expert cook with 15 years of experience and won multiple awards internationally. The assistant is helpful, creative, clever, and very friendly. It will answer only cooking related queries.'
                },
                ...messagesList
            ],
            max_tokens: 300,
            temperature: 0.9,
            top_p: 1,
            presence_penalty: 0.6,
            frequency_penalty: 0.6,
            stop: ['[DONE]'],
            stream: true
            })
        });
        const reader = response.body?.getReader();
        const m = createMessage('bot', '');
        chatWindowHistory.replaceChild(m, loadingMsg);
        while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            const decoded = new TextDecoder('utf-8').decode(value);
            const sentences = decoded.split('\n').map(l => l.replace(/data: /, '').trim()).filter(line => line.length && !line.includes('[DONE]')).map(line => JSON.parse(line));
            sentences.forEach(word => {
            const { choices } = word;
            const { delta } = choices[0];
            const { content } = delta;
            if(content) m.innerText += content;
            });
        }
        return m;
    };

    if(chatToggle && chat) {
        chatToggle.addEventListener('click', () => {
            const active = chat.getAttribute('data-active');
            chat.setAttribute('data-active', active === 'true' ? 'false' : 'true');
        });
    }

    if(chatWindowSend && chatWindowInputText && chatWindowHistory) {
        chatWindowSend.addEventListener('click', handleSendMessage);
        chatWindowInputText.addEventListener('keyup', e => {
            if(e.key === 'Enter') handleSendMessage();
        });
    }
</script>