---
import "@styles/chat.css"
import VoiceInput from "./VoiceInput.astro";
---

<button id="chat-toggle" class="fixed right-0 bottom-0 w-16 h-16 rounded-full bg-[#60739f] dark:bg-slate-600 shadow-lg flex items-center justify-center text-white font-bold cursor-pointer transition-all duration-300 ease-in-out">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 01-2.555-.337A5.972 5.972 0 015.41 20.97a5.969 5.969 0 01-.474-.065 4.48 4.48 0 00.978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z" />
    </svg>
</button>

<section id="chat" class="fixed bottom-0 right-0 min-w-[420px] w-[33vw] rounded-[1rem] bg-[#4b5563] dark:bg-slate-600 shadow-lg overflow-hidden transition-all duration-300 ease-in-out" data-active="false">

    <header class="p-4 bg-[#60739f] dark:bg-gray-800 border-b border-[#60739f] dark:border-gray-800 text-white text-center py-4 px-0">
        <h2 class="text-xl text-white font-bold m-0">Recipe Assistant</h2>
    </header>

    <div id="chat-window" class="flex flex-col justify-between p-4 bg-white dark:bg-slate-600">
        <ul id="chat-window-history">
            <!-- Fill -->
            <li class="message-bot">
                Hello, I'm your recipe assistant. How can I help you?
            </li>
        </ul>

        
        <div id="chat-window-input" class="flex items-center">
            <input type="text" class="p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1  block w-full mr-4 text-base dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-gray-600 dark:focus:border-gray-400" placeholder="Type a message..." />
            <VoiceInput />
            <button id="chat-window-send" class="p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none block sm:text-sm bg-[#60739f] text-white dark:bg-gray-800 dark:text-white dark:border-gray-800">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
                </svg>
            </button>
        </div>
    </div>

</section>

<style lang="scss" scoped>

    #chat {
        bottom: calc(2rem + 60px);
        right: 1rem;

        &[data-active="false"] {
            transform: translateY(100%);
            opacity: 0;
            pointer-events: none;
        }

        &[data-active="true"] {
            transform: translateY(0);
            opacity: 1;
            pointer-events: auto;
        }

        &-toggle {
            bottom: 1rem;
            right: 1rem;
            &:hover {
                opacity: 0.8;
            }
        }

        &-window {
            height: calc(80vh - 4rem);
            &-history {
                list-style: none;
                padding: 0;
                margin: 0;
                height: calc(100% - 3.75rem);
                border-radius: 0.5rem;
                overflow-y: scroll;
                scroll-behavior: smooth;
            }
        }
    }

</style>

<script>
    const chat = document.querySelector('#chat') as HTMLDivElement;
    const chatToggle = document.querySelector('#chat-toggle') as HTMLButtonElement;
    const chatWindow = document.querySelector('#chat-window') as HTMLDivElement;
    const chatWindowHistory = document.querySelector('#chat-window-history') as HTMLUListElement;
    const chatWindowInput = document.querySelector('#chat-window-input') as HTMLDivElement;
    const chatWindowSend = document.querySelector('#chat-window-send') as HTMLButtonElement;
    const chatWindowInputText = document.querySelector('#chat-window-input input') as HTMLInputElement;

    // Create message
    const createMessage = (role: string, content: string) => {
        const message = document.createElement('li');
        message.classList.add(`message-${role}`);
        message.innerText = content;
        return message;
    }

    // Create loading message
    const loadMessage = () => {
        const loadingMessage = document.createElement('li');
        loadingMessage.classList.add('message-bot');
        loadingMessage.innerHTML = `
            <div class="loading">
                <div class="loading-dot"></div>
                <div class="loading-dot"></div>
                <div class="loading-dot"></div>
            </div>
        `;
        return loadingMessage;
    }

    // Handle send message
    const handleSendMessage = async() => {
        const message = chatWindowInputText.value;
        if (message) {

            // Add message to history
            chatWindowHistory.appendChild(createMessage('user', message));
            chatWindowInputText.value = '';
            chatWindowInputText.setAttribute('disabled', 'true');

            // Create a loading message
            const loadingMessage = loadMessage();
            chatWindowHistory.appendChild(loadingMessage);

            // Replace loading message with response
            await handleResponse(loadingMessage);
            chatWindowInputText.removeAttribute('disabled');
            chatWindowHistory.scrollTop = chatWindowHistory.scrollHeight;
        }
    }

    // Handle chat response
    const handleResponse = async(loadingMessage: HTMLLIElement) => {

        // Get all messages in history
        const messagesList = Array.from(chatWindowHistory.querySelectorAll('li')).map((message) => {
            return {
                role: message.classList.contains('message-user') ? 'user' : 'assistant',
                content: message.innerText
            }
        });

        // Stream response from API
        const response = await fetch(import.meta.env.PUBLIC_OPENAI_COMPLETION_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${import.meta.env.PUBLIC_OPENAI}`
            },
            body: JSON.stringify({
                model: 'gpt-3.5-turbo',
                // model: 'gpt-4',
                messages: [
                    {
                        role: 'system',
                        content: 'The following is a conversation with an AI assistant. The assistant is an expert cook with 15 years of experience and won multiple awards internationally. The assistant is helpful, creative, clever, and very friendly.The assistant will evaluate the question of the user and check if it is related to the scope of cooking, the assistant will not be able to answer to any other questions that is not related to cooking.'
                    },
                    ...messagesList
                ],
                max_tokens: 300,
                temperature: 0.9,
                top_p: 1,
                presence_penalty: 0.6,
                frequency_penalty: 0.6,
                stop: ['[DONE]'],
                stream: true
            })
        });

        const reader = response.body?.getReader() as ReadableStreamDefaultReader;
        const message = createMessage('bot', '');
        chatWindowHistory.replaceChild(message, loadingMessage);

        while (true) {
            const { done, value } = await reader?.read();
            if (done) {
                break;
            }

            const decoder = new TextDecoder('utf-8').decode(value);
            const sentence = decoder.split('\n');
            const parsedSentence = sentence.map(line =>
                line.replace(/data: /, '').trim())
                .filter(line => line.length > 0 && !line.includes('[DONE]'))
                .map(line => JSON.parse(line))

            // Extract delta from parsed sentence
            for(const word of parsedSentence) {
                const { choices } = word;
                const { delta } = choices[0];
                const { content } = delta;
                if(content) {
                    message.innerText += content;
                }
            }
        }

        return message;
    }

    // Handle toggle chat
    if(chatToggle && chat) {
        chatToggle.addEventListener('click', () => {
            const active = chat.getAttribute('data-active');
            active === 'true' ? chat.setAttribute('data-active', 'false') : chat.setAttribute('data-active', 'true');
        });
    }

    // Handle send message
    if(chatWindowSend && chatWindowInputText && chatWindowHistory) {
        chatWindowSend.addEventListener('click', () => {
            handleSendMessage();
        });

        chatWindowInputText.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') {
                handleSendMessage();
            }
        });
    }

</script>

