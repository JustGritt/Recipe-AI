---
import HeaderLink from './HeaderLink.astro';
import Menu from '@icons/Menu.astro'
import DarkModeToggle from './DarkModeToggle.astro';
import { SITE_TITLE } from '@consts';
---

<header class="fixed min-w-[calc(100vw-8px)] m-0 px-4 py-0 backdrop-filter backdrop-blur-sm bg-opacity-60 h-20 transition-colors shadow bg-white text-black z-10">
	<nav class="relative flex justify-end items-center h-20 lg:justify-between">
		<!-- Logo -->
		<a href="/" class="no-underline border-md p-4 hidden text-base m-0 rounded-m h-10 items-center justify-center overflow-hidden lg:flex bg-slate-950 text-zinc-50 hover:text-white ">{SITE_TITLE}</a>

		<!-- Main nav -->
		<div class="hidden md:block md:absolute md:left-2 lg:left-1/2 lg:-translate-x-1/2">
			<HeaderLink href="/">Home</HeaderLink>
			<HeaderLink href="/recipe">Recipe</HeaderLink>
			<HeaderLink href="/about">About</HeaderLink>
		</div>

		<!-- Side links -->
		<div id="sideLinks" class="flex justify-center items-center flex-row-reverse h-10">
			<DarkModeToggle />
		</div>

	</nav>
</header>

<!-- Mobile nav -->
<div class="w-full h-16 fixed bottom-1 left-0 flex justify-left items-center md:hidden">
	<HeaderLink href="/">Home</HeaderLink>
	<HeaderLink href="/recipe">Recipe</HeaderLink>
	<HeaderLink href="/about">About</HeaderLink>
</div>


<script>

	const createLoggedOffMenu = () => {
		const registerLink = document.createElement('a');
		registerLink.classList.add('relative', 'inline-flex', 'justify-center', 'items-center', 'h-full', 'my-0', 'py-2', 'mx-2', 'px-4', 'rounded-lg', 'transition-all', 'hover:bg-gray-200', 'text-black');
		registerLink.href = '/register';
		registerLink.textContent = 'Register';

		const loginLink = document.createElement('a');
		loginLink.classList.add('relative', 'inline-flex', 'justify-center', 'items-center', 'h-full', 'my-0', 'py-2', 'px-4', 'rounded-lg', 'transition-all', 'hover:bg-gray-200', 'text-black');
		loginLink.href = '/login';
		loginLink.textContent = 'Login';

		sideLinks.appendChild(registerLink);
		sideLinks.appendChild(loginLink);
	}

	const createLoggedInMenu = () => {
		// Create a container for the links
		const linksContainer = document.createElement('div');
		linksContainer.classList.add('flex', 'items-center', 'justify-center', 'flex-row-reverse', 'h-20');

		const dashboardLink = document.createElement('a');
		dashboardLink.classList.add('relative', 'inline-flex', 'justify-center', 'items-center', 'my-0', 'py-2', 'mx-2', 'px-4', 'rounded-lg', 'transition-all', 'hover:bg-gray-200', 'text-black');
		dashboardLink.href = '/dashboard';
		dashboardLink.textContent = 'Dashboard';

		const logoutLink = document.createElement('a');
		logoutLink.classList.add('relative', 'inline-flex', 'justify-center', 'items-center', 'my-0', 'py-2', 'mx-2', 'px-4', 'rounded-lg', 'transition-all', 'hover:bg-gray-200', 'text-black');
		logoutLink.href = '/logout';
		logoutLink.textContent = 'Logout';

		// Append the links to the container
		linksContainer.appendChild(logoutLink);
		linksContainer.appendChild(dashboardLink);
		sideLinks.appendChild(linksContainer);
	}

	const token = localStorage.getItem('jwt') || null;
	const sideLinks = document.getElementById('sideLinks') as HTMLDivElement;
	if (token) {
		const req = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/verify`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': `Bearer ${import.meta.env.PUBLIC_OPENAI}`
			},
			body: JSON.stringify({ token }),
		});
		await req.json().then((res) => {
			if (res.status === 'success') {
				createLoggedInMenu();
			} else {
				createLoggedOffMenu();
			}
		})
	} else {
		createLoggedOffMenu();
	}
</script>