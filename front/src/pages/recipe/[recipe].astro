---
import BaseHead from '@components/BaseHead.astro';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import Chat from '@components/Chat.astro';
import Comment from '@components/Comment.astro';

// Icons
import Copy from '@icons/Copy.astro';
import Mail from '@icons/Mail.astro';
import Bolt from '@icons/Bolt.astro';

import { SITE_TITLE, SITE_DESCRIPTION } from '@consts';
import RecipeCard from '@components/RecipeCard.astro';

export async function getStaticPaths() {
    const recipes = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/recipes/`).then(res => res.json());
    return recipes.recipes.map((recipe:any) => ({
        params: { recipe: recipe._id },
        props: {
            recipeId: recipe._id,
            name: recipe.name,
            ingredients: recipe.ingredients,
            instructions: recipe.instructions,
            difficulty: recipe.difficulty,
            picture: recipe.picture,
            calories: recipe.calories,
            tags: recipe.tags,
            time: recipe.tags.find((tag:string) => tag.includes('minutes'))
        }
    }));
}

const { name, ingredients, instructions, difficulty, picture, calories, tags, time, recipeId } = Astro.props;
---
<!DOCTYPE html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body class="bg-white text-slate-900 transition-colors">
		<Header />

        <RecipeCard {name} {ingredients} {instructions} {difficulty} {picture} {calories} {tags} {time} />

        <section class="w-4/5 lg:w-3/5 mx-auto px-4 py-8 relative">
            <h5 class="text-slate-900  mb-4">
                Comments
            </h5>

            <Comment {recipeId} />
        </section>

        <Chat />
		<Footer />
	</body>
</html>

<script>
    // Selectors
    const recoButton = document.getElementById('recoButton') as HTMLButtonElement;
    const copyButton = document.getElementById('copyButton') as HTMLButtonElement;
    const instructionsList = document.getElementById('instructionSection') as HTMLUListElement;
    const recoContainer = document.getElementById('recoContainer') as HTMLDivElement;

    // Handle chat response
    const handleResponse = async() => {

        if(recoContainer.childElementCount > 0) {
            console.log("Quick exit");
            recoContainer.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "nearest" });
            return;
        }

        // Disable the button until the response is received
        recoButton.disabled = true;
        recoButton.classList.add('opacity-50', 'cursor-not-allowed');

        // Get all messages in history
        const instructionItems = Array.from(instructionsList.querySelectorAll('li')).map((ingredient) => {
            return {
                role: 'user',
                content: ingredient.innerText
            }
        });

        // Stream response from API
        const response = await fetch(import.meta.env.PUBLIC_OPENAI_COMPLETION_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${import.meta.env.PUBLIC_OPENAI}`
            },
            body: JSON.stringify({
                model: 'gpt-3.5-turbo',
                messages: [
                    {
                        role: 'system',
                        content: 'You are now to act as an expert chef with 10 years of experience. Your goal is to help me pair my current recipe with a selection of wine, cheese or dessert that would fit the best. Suggest a low calorie and vegan alternative if and recommend seasonal products if possible.'
                    },
                    ...instructionItems
                ],
                max_tokens: 1000,
                temperature: 0.9,
                top_p: 1,
                presence_penalty: 0.6,
                frequency_penalty: 0.6,
                stop: ['[DONE]'],
                stream: true
            })
        });

        const reader = response.body?.getReader() as ReadableStreamDefaultReader;
        const message = document.createElement('div');
        message.classList.add('flex', 'gap-4', 'my-4');

        while (true) {
            const { done, value } = await reader?.read();
            if (done) {
                break;
            }

            const decoder = new TextDecoder('utf-8').decode(value);
            const sentence = decoder.split('\n');
            const parsedSentence = sentence.map(line =>
                line.replace(/data: /, '').trim())
                .filter(line => line.length > 0 && !line.includes('[DONE]'))
                .map(line => JSON.parse(line))

            // Extract delta from parsed sentence
            for(const word of parsedSentence) {
                const { choices } = word;
                const { delta } = choices[0];
                const { content } = delta;
                if(content) {
                    message.innerText += content;
                    recoContainer.appendChild(message);
                }
            }
        }

        // Enable the button again
        recoButton.disabled = false;
        recoButton.classList.remove('opacity-50', 'cursor-not-allowed');

        return message;
    }

    recoButton?.addEventListener('click', () => {
        handleResponse();
    });

    copyButton?.addEventListener('click', () => {
        const getIngredients = () => Array.from(instructionsList.querySelectorAll('li')).map(ingredient => ingredient.innerText);
        navigator.clipboard.writeText(getIngredients().join('\n'));
    });
</script>