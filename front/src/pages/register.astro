---
import BaseHead from '@components/BaseHead.astro';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import Chat from '@components/Chat.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import SuccessNotification from '@components/SuccessNotification.astro';
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    </head>
    <body class="min-h-screen flex flex-col">
        <Header title={`${SITE_TITLE} - Register`} />
        <main id="home" class="flex-grow w-full bg-white transition-all duration-300 ease-in-out m-0 max-w-full py-20">
            <section class="w-full max-w-md m-auto mt-20">
                <SuccessNotification id="notification" class="mb-6" />
                <div class="bg-white rounded-lg border-2 border-slate-600 p-8 space-y-6 shadow">
                    <h1 class="text-2xl font-bold tracking-tight text-slate-900 text-center">
                        Create a RecipeAI account
                    </h1>
                    <form id="registration-form" class="space-y-6" action="POST">
                        <div>
                            <label for="username" class="block mb-2 text-sm font-medium text-gray-900">
                                Username
                            </label>
                            <input type="text" name="username" id="username"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 focus:ring-slate-500 focus:border-slate-500"
                                placeholder="Johnoe" required />
                        </div>
                        <div>
                            <label for="email" class="block mb-2 text-sm font-medium text-gray-900">
                                Email address
                            </label>
                            <input type="email" name="email" id="email"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 focus:ring-slate-500 focus:border-slate-500"
                                placeholder="john@doe.com" required />
                        </div>
                        <div>
                            <label for="password" class="block mb-2 text-sm font-medium text-gray-900">
                                Password
                            </label>
                            <input type="password" name="password" id="password" placeholder="••••••••" minlength="8"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 focus:ring-slate-500 focus:border-slate-500"
                                required />
                        </div>
                        <div>
                            <label for="confirm-password" class="block mb-2 text-sm font-medium text-gray-900">
                                Confirm password
                            </label>
                            <input type="password" name="confirm-password" id="confirm-password" placeholder="••••••••" minlength="8"
                                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 focus:ring-slate-500 focus:border-slate-500"
                                required />
                        </div>
                        <div class="flex items-start">
                            <div class="flex items-center h-5">
                                <input id="terms" aria-describedby="terms" type="checkbox"
                                    class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-gray-300" required>
                            </div>
                            <div class="ml-3 text-sm">
                                <label for="terms" class="font-light text-gray-500">
                                    I accept the
                                    <a class="font-medium text-blue-600 hover:underline hover:text-blue-400" href="/terms" target="_blank">
                                        Terms and Conditions
                                    </a>
                                </label>
                            </div>
                        </div>
                        <button type="submit"
                            class="w-full text-white bg-slate-600 hover:bg-slate-700 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
                            Create an account
                        </button>
                        <p class="text-sm font-light text-gray-500 text-center">
                            Already have an account?
                            <a href="/login" class="font-medium text-blue-600 hover:underline hover:text-blue-400">
                                Login here
                            </a>
                        </p>
                    </form>
                </div>
                <Chat />
            </section>
        </main>
        <Footer />
    </body>
</html>

<script>
    const registrationForm = document.getElementById('registration-form') as HTMLFormElement;

    registrationForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        const password = (document.getElementById('password') as HTMLInputElement).value;
        const confirmPassword = (document.getElementById('confirm-password') as HTMLInputElement).value;
        if (password !== confirmPassword) {
            alert('Passwords do not match');
            return;
        }

        const formData = {
            username: (document.getElementById('username') as HTMLInputElement).value,
            email: (document.getElementById('email') as HTMLInputElement).value,
            password,
        };

        try {
            const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/register`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData),
            });

            if (response.ok) {
                const notification = document.getElementById('notification') as HTMLDivElement;
                notification.classList.remove('hidden');
                notification.classList.add('flex');

                setTimeout(() => {
                    window.location.href = '/login';
                }, 2000);
            } else {
                const responseData = await response.json();
                alert(responseData.message);
            }
        } catch (error) {
            console.error(error);
            alert('An error occurred while registering. Please try again later.');
        }
    });

    const notificationCloseButton = document.getElementById('notification-close') as HTMLButtonElement;
    if (notificationCloseButton) {
        notificationCloseButton.addEventListener('click', () => {
            const notification = document.getElementById('notification') as HTMLDivElement;
            notification.classList.add('hidden');
        });
    }
</script>